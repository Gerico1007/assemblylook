"""
Dashboard - HTML generation for unified session visualization
♠️🌿🎸🧵
"""

import os
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime


class DashboardGenerator:
    """Generates beautiful HTML dashboards for session visualization."""

    def __init__(self, output_dir: str = None):
        """
        Initialize dashboard generator.

        Args:
            output_dir: Where to save generated HTML (defaults to ~/.assemblylook)
        """
        if output_dir:
            self.output_dir = Path(output_dir)
        else:
            self.output_dir = Path.home() / ".assemblylook"

        self.output_dir.mkdir(parents=True, exist_ok=True)

    def generate_dashboard(
        self,
        sessions: Dict[str, List[Dict[str, Any]]],
        by_project: Dict[str, Dict[str, Any]],
        by_date: Dict[str, List[Dict[str, Any]]],
        by_ai: Dict[str, Any],
        assembly_sessions: List[Dict[str, Any]]
    ) -> str:
        """
        Generate the main dashboard HTML.

        Returns:
            Path to generated index.html
        """
        html = self._generate_html_structure(
            sessions, by_project, by_date, by_ai, assembly_sessions
        )

        index_path = self.output_dir / "index.html"
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(html)

        return str(index_path)

    def _generate_html_structure(
        self,
        sessions: Dict[str, List[Dict[str, Any]]],
        by_project: Dict[str, Dict[str, Any]],
        by_date: Dict[str, List[Dict[str, Any]]],
        by_ai: Dict[str, Any],
        assembly_sessions: List[Dict[str, Any]]
    ) -> str:
        """Generate complete HTML structure."""

        total_sessions = len(sessions.get('claude', [])) + len(sessions.get('gemini', []))
        total_projects = len(by_project)
        total_assembly = len(assembly_sessions)

        html = f"""<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>♠️🌿🎸🧵 AssemblyLook - G.Music Session Tracker</title>
    {self._get_styles()}
    {self._get_scripts()}
</head>
<body>
    <div class="container">
        <header>
            <h1>♠️🌿🎸🧵 AssemblyLook</h1>
            <p class="subtitle">G.Music Session Tracker - Jerry's ⚡ Creative Work Dashboard</p>
            <div class="stats-bar">
                <div class="stat">
                    <span class="stat-value">{total_sessions}</span>
                    <span class="stat-label">Total Sessions</span>
                </div>
                <div class="stat">
                    <span class="stat-value">{total_projects}</span>
                    <span class="stat-label">Projects</span>
                </div>
                <div class="stat assembly-stat">
                    <span class="stat-value">{total_assembly}</span>
                    <span class="stat-label">Assembly Sessions</span>
                </div>
                <div class="stat">
                    <span class="stat-value">{by_ai['claude']['total']}</span>
                    <span class="stat-label">Claude</span>
                </div>
                <div class="stat">
                    <span class="stat-value">{by_ai['gemini']['total']}</span>
                    <span class="stat-label">Gemini</span>
                </div>
            </div>
        </header>

        <div class="view-tabs">
            <button class="tab-btn active" onclick="showView('project')">📁 By Project</button>
            <button class="tab-btn" onclick="showView('date')">📅 By Date</button>
            <button class="tab-btn" onclick="showView('ai')">🤖 By AI</button>
            <button class="tab-btn" onclick="showView('assembly')">♠️🌿🎸🧵 Assembly Mode</button>
        </div>

        <div id="project-view" class="view-content active">
            {self._generate_project_view(by_project)}
        </div>

        <div id="date-view" class="view-content">
            {self._generate_date_view(by_date)}
        </div>

        <div id="ai-view" class="view-content">
            {self._generate_ai_view(by_ai)}
        </div>

        <div id="assembly-view" class="view-content">
            {self._generate_assembly_view(assembly_sessions)}
        </div>

        <footer>
            <p>Generated by AssemblyLook v0.1.0 | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
</body>
</html>"""
        return html

    def _generate_project_view(self, by_project: Dict[str, Dict[str, Any]]) -> str:
        """Generate project-centric view."""
        html = "<h2>Projects Overview</h2>\n<div class='projects-grid'>\n"

        for project_name, data in by_project.items():
            sessions = data['sessions']
            claude_count = data['claude_sessions']
            gemini_count = data['gemini_sessions']
            total_messages = data['total_messages']
            last_activity = data.get('last_activity', 'Unknown')

            # Format timestamp
            if last_activity and 'T' in last_activity:
                try:
                    dt = datetime.fromisoformat(last_activity.replace('Z', '+00:00'))
                    last_activity = dt.strftime('%Y-%m-%d %H:%M')
                except:
                    pass

            # Check if any session has Assembly mode
            has_assembly = any(
                s.get('analysis', {}).get('is_assembly_mode', False)
                for s in sessions
            )

            assembly_badge = ' <span class="assembly-badge">♠️🌿🎸🧵</span>' if has_assembly else ''

            html += f"""
            <div class="project-card">
                <div class="project-header">
                    <h3>{project_name}{assembly_badge}</h3>
                    <span class="timestamp">{last_activity}</span>
                </div>
                <div class="project-stats">
                    <span class="ai-badge claude">{claude_count} Claude</span>
                    <span class="ai-badge gemini">{gemini_count} Gemini</span>
                    <span class="message-count">{total_messages} messages</span>
                </div>
                <div class="sessions-list">
"""

            for session in sessions[:5]:  # Show first 5 sessions
                session_html = self._generate_session_card(session)
                html += session_html

            if len(sessions) > 5:
                html += f"<p class='more-sessions'>+ {len(sessions) - 5} more sessions</p>\n"

            html += """
                </div>
            </div>
"""

        html += "</div>\n"
        return html

    def _generate_date_view(self, by_date: Dict[str, List[Dict[str, Any]]]) -> str:
        """Generate date-centric view."""
        html = "<h2>Sessions by Date</h2>\n<div class='dates-list'>\n"

        for date, sessions in by_date.items():
            claude_count = sum(1 for s in sessions if s['ai_type'] == 'claude')
            gemini_count = sum(1 for s in sessions if s['ai_type'] == 'gemini')

            html += f"""
            <div class="date-group">
                <div class="date-header">
                    <h3>{date}</h3>
                    <span class="session-count">{len(sessions)} sessions</span>
                </div>
                <div class="sessions-grid">
"""

            for session in sessions:
                session_html = self._generate_session_card(session, compact=True)
                html += session_html

            html += """
                </div>
            </div>
"""

        html += "</div>\n"
        return html

    def _generate_ai_view(self, by_ai: Dict[str, Any]) -> str:
        """Generate AI-centric view."""
        html = "<h2>Sessions by AI</h2>\n<div class='ai-sections'>\n"

        for ai_type in ['claude', 'gemini']:
            data = by_ai[ai_type]
            sessions = data['sessions']
            total = data['total']
            total_messages = data['total_messages']

            html += f"""
            <div class="ai-section">
                <div class="ai-section-header">
                    <h3 class="ai-badge {ai_type}">{ai_type.capitalize()}</h3>
                    <span class="stats">{total} sessions | {total_messages} messages</span>
                </div>
                <div class="sessions-grid">
"""

            for session in sessions[:10]:  # Show first 10
                session_html = self._generate_session_card(session, compact=True)
                html += session_html

            html += """
                </div>
            </div>
"""

        html += "</div>\n"
        return html

    def _generate_assembly_view(self, assembly_sessions: List[Dict[str, Any]]) -> str:
        """Generate Assembly Mode view."""
        html = "<h2>♠️🌿🎸🧵 G.Music Assembly Mode Sessions</h2>\n"

        if not assembly_sessions:
            html += "<p class='empty-state'>No Assembly Mode sessions detected yet. Start a session with the Spiral Ensemble to see it tracked here!</p>\n"
        else:
            html += "<div class='sessions-grid'>\n"

            for session in assembly_sessions:
                session_html = self._generate_session_card(session, show_perspectives=True)
                html += session_html

            html += "</div>\n"

        return html

    def _generate_session_card(self, session: Dict[str, Any], compact: bool = False, show_perspectives: bool = False) -> str:
        """Generate HTML for a single session card."""
        ai_type = session.get('ai_type', 'unknown')
        project_name = session.get('project_info', {}).get('name', 'unknown')
        session_id = session.get('session_id', '')
        first_timestamp = session.get('first_timestamp', 'Unknown')
        message_count = session.get('message_count', 0)

        # Format timestamp
        if first_timestamp and 'T' in first_timestamp:
            try:
                dt = datetime.fromisoformat(first_timestamp.replace('Z', '+00:00'))
                first_timestamp = dt.strftime('%Y-%m-%d %H:%M')
            except:
                pass

        # Get analysis data
        analysis = session.get('analysis', {})
        is_assembly = analysis.get('is_assembly_mode', False)
        perspectives = analysis.get('perspectives_present', [])
        first_msg = analysis.get('first_message', 'No message')
        stats = analysis.get('stats', {})

        # Get HTML link if available
        html_path = session.get('html_path')
        if html_path:
            # Make link relative or absolute
            link_html = f'<a href="{html_path}" target="_blank" class="session-link">View Session →</a>'
        else:
            link_html = '<span class="no-link">No HTML available</span>'

        assembly_badge = '<span class="assembly-badge">♠️🌿🎸🧵 ASSEMBLY</span>' if is_assembly else ''

        perspectives_html = ''
        if show_perspectives and perspectives:
            perspective_icons = {
                'nyro': '♠️',
                'aureon': '🌿',
                'jamai': '🎸',
                'synth': '🧵'
            }
            perspectives_html = '<div class="perspectives">' + ''.join(
                f'<span class="perspective-icon">{perspective_icons.get(p, "")}</span>'
                for p in perspectives
            ) + '</div>'

        html = f"""
        <div class="session-card {ai_type}">
            <div class="session-header">
                <span class="ai-badge {ai_type}">{ai_type}</span>
                <span class="project-name">{project_name}</span>
                {assembly_badge}
            </div>
            <div class="session-time">{first_timestamp}</div>
            <div class="session-preview">{first_msg}</div>
            {perspectives_html}
            <div class="session-stats">
                <span>{message_count} messages</span>
                <span>{stats.get('word_count', 0)} words</span>
            </div>
            <div class="session-footer">
                {link_html}
            </div>
        </div>
"""
        return html

    def _get_styles(self) -> str:
        """Return CSS styles combining best from both tools."""
        return """
    <style>
        /* Global styles - inspired by claude-code-log */
        body {
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', 'Droid Sans Mono', monospace;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #f3d6d2, #f1dcce, #f0e4ca, #eeecc7, #e3ecc3, #d5eac0, #c6e8bd, #b9e6bc);
            color: #333;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: #ffffff66;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        h1 {
            font-size: 2.5em;
            margin: 0;
            color: #2c3e50;
        }

        .subtitle {
            font-size: 1.1em;
            color: #666;
            margin-top: 10px;
        }

        /* Stats Bar */
        .stats-bar {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .stat {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 20px;
            background: #ffffff99;
            border-radius: 8px;
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
        }

        .stat-label {
            font-size: 0.9em;
            color: #666;
        }

        .assembly-stat .stat-value {
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        /* View Tabs */
        .view-tabs {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .tab-btn {
            padding: 12px 24px;
            border: none;
            background: #ffffff66;
            color: #333;
            font-family: inherit;
            font-size: 1em;
            cursor: pointer;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .tab-btn:hover {
            background: #ffffff99;
            transform: translateY(-2px);
        }

        .tab-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-weight: bold;
        }

        /* View Content */
        .view-content {
            display: none;
        }

        .view-content.active {
            display: block;
        }

        /* Project Cards */
        .projects-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 20px;
        }

        .project-card {
            background: #ffffff88;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .project-card:hover {
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .project-header h3 {
            margin: 0;
            font-size: 1.4em;
            color: #2c3e50;
        }

        .timestamp {
            font-size: 0.85em;
            color: #666;
        }

        .project-stats {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        /* AI Badges */
        .ai-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.85em;
            font-weight: bold;
        }

        .ai-badge.claude {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .ai-badge.gemini {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }

        .message-count {
            padding: 4px 12px;
            background: #e0e0e0;
            border-radius: 12px;
            font-size: 0.85em;
        }

        /* Assembly Badge */
        .assembly-badge {
            display: inline-block;
            padding: 4px 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            font-size: 0.85em;
            font-weight: bold;
        }

        /* Session Cards */
        .sessions-list, .sessions-grid {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .session-card {
            background: #ffffff99;
            border-radius: 8px;
            padding: 15px;
            border-left: 4px solid #ddd;
        }

        .session-card.claude {
            border-left-color: #667eea;
        }

        .session-card.gemini {
            border-left-color: #f5576c;
        }

        .session-header {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 8px;
        }

        .project-name {
            font-weight: bold;
            color: #2c3e50;
        }

        .session-time {
            font-size: 0.85em;
            color: #666;
            margin-bottom: 8px;
        }

        .session-preview {
            font-size: 0.9em;
            color: #444;
            margin-bottom: 10px;
            line-height: 1.4;
        }

        .session-stats {
            display: flex;
            gap: 15px;
            font-size: 0.85em;
            color: #666;
            margin-bottom: 10px;
        }

        .session-footer {
            display: flex;
            justify-content: flex-end;
        }

        .session-link {
            color: #667eea;
            text-decoration: none;
            font-weight: bold;
            font-size: 0.9em;
        }

        .session-link:hover {
            text-decoration: underline;
        }

        .no-link {
            color: #999;
            font-size: 0.85em;
            font-style: italic;
        }

        /* Perspectives */
        .perspectives {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
        }

        .perspective-icon {
            font-size: 1.2em;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
            font-size: 1.1em;
        }

        /* Footer */
        footer {
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            color: #666;
            font-size: 0.9em;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .projects-grid {
                grid-template-columns: 1fr;
            }

            .stats-bar {
                gap: 15px;
            }

            h1 {
                font-size: 1.8em;
            }
        }
    </style>
"""

    def _get_scripts(self) -> str:
        """Return JavaScript for interactivity."""
        return """
    <script>
        function showView(viewName) {
            // Hide all views
            document.querySelectorAll('.view-content').forEach(view => {
                view.classList.remove('active');
            });

            // Remove active class from all tabs
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            // Show selected view
            document.getElementById(viewName + '-view').classList.add('active');

            // Mark clicked tab as active
            event.target.classList.add('active');
        }
    </script>
"""


if __name__ == "__main__":
    # Quick test - generate full dashboard
    from assemblylook.core.session_parser import SessionParser
    from assemblylook.core.project_mapper import ProjectMapper
    from assemblylook.core.aggregator import SessionAggregator
    from assemblylook.core.analyzer import SessionAnalyzer

    print("Parsing sessions...")
    parser = SessionParser()
    sessions = parser.parse_all_sessions()

    print("Mapping projects...")
    mapper = ProjectMapper()
    enriched = mapper.enrich_sessions(sessions)

    print("Analyzing sessions...")
    analyzer = SessionAnalyzer()
    analyzed = analyzer.enrich_sessions_with_analysis(enriched)

    print("Aggregating data...")
    aggregator = SessionAggregator()
    by_project = aggregator.aggregate_by_project(analyzed)
    by_date = aggregator.aggregate_by_date(analyzed)
    by_ai = aggregator.aggregate_by_ai(analyzed)
    assembly_sessions = analyzer.get_assembly_sessions(analyzed)

    print("Generating dashboard...")
    generator = DashboardGenerator()
    output_path = generator.generate_dashboard(
        analyzed, by_project, by_date, by_ai, assembly_sessions
    )

    print(f"\n✅ Dashboard generated: {output_path}")
